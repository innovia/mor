class Order < ActiveRecord::Base
  has_many :transactions,
           :class_name => "OrderTransaction",
           :dependent => :destroy

  acts_as_state_machine :initial => :pending
  state :pending
  state :authorized
  state :paid
  state :payment_declined
  
  event :payment_authorized do
    transitions :from =>  :pending,
                :to =>    :authorized
           
    transitions :from =>  :payment_declined,
                :to =>    :authorized
  end
  
  event :payment_captured do
    transitions :from =>  :authorized,
                :to =>    :paid
  end
           
  event :transaction_declined do
    transitions :from =>  :pending,
                :to =>    :payment_declined
  
    transitions :from =>  :payment_declined,
                :to =>    :payment_declined
  
    transitions :from =>  :authorized,
                :to =>    :authorized
  end

def number
    CGI::Session.generate_unique_id
end

def authorize_payment(credit_card, options = {})
  options[:order_id] = number
  
  transaction do
    authorization = OrderTransaction.authorize(amount, credit_card, options)
    transactions.push(authorization)
    
    if authorization.success?
      payment_authorized!
    else
      transaction_declined!
    end
    
    #return
    authorization
  end
end

def authorization_reference
  if authorization = transactions.find_by_action_and_success('authorization', true, :order => "id ASC" )
    authorization.reference
  end
end

def capture_payment(options = {})
    transaction do
      capture = OrderTransaction.capture(amount, authorization_reference, options)
      transactions.push(capture)
      if capture.success?
        payment_captured!
      else
        transaction_declined!
      end
      #return
      capture
    end
  end


  
end












class OrderTransaction < ActiveRecord::Base
  belongs_to :order
  serialize :params
  cattr_accessor  :gateway
  
  class << self
    def authorize(amount, credit_card, options = {})
      process('authorization', amount) do |gw|
        gw.authorize(amount, credit_card, options)
      end
    end
    
    def capture(amount, authorization, options = {})
      process('capture', amount) do |gw|
        gw.capture(amount, authorization, options) 
      end
    end
    
    private
    
    def process(action, amount = nil)
      result = OrderTransaction.new
      result.amount = amount
      result.action = action
      
      begin
        response = yield gateway
        result.success = response.success?
        result.reference = response.authorization
        result.message = response.message
        result.params = response.params
        result.test = response.test?
        
      rescue ActiveMerchant::ActiveMerchantError => e
        result.success = false
        result.reference = nil
        result.message = e.message
        result.params = {}
        result.test = gateway.test?
      end
      result
    end
  end
end
